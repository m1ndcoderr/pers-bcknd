import { EntityRepository } from '@mikro-orm/core'
import { MongoHighlighter } from '@mikro-orm/mongo-highlighter/MongoHighlighter'
import { InjectRepository } from '@mikro-orm/nestjs'
import { MikroOrmModule } from '@mikro-orm/nestjs/mikro-orm.module'
import { Module, OnModuleInit } from '@nestjs/common'
import { ConfigModule } from '@nestjs/config/dist/config.module'
// import { hash } from 'argon2'
import { Post } from 'src/entities/Post'
import { User } from 'src/entities/User'

@Module({
  imports: [
    ConfigModule.forRoot(),
    MikroOrmModule.forRoot({
      entities: ['./dist/entities'],
      entitiesTs: ['./src/entities'],
      clientUrl: process.env.MONGO_URL,
      highlighter: new MongoHighlighter(),
      debug: true,
      type: 'mongo'
    }),
    MikroOrmModule.forFeature({ entities: [User, Post] })
  ],
  exports: [MikroOrmModule]
})
export class OrmModule implements OnModuleInit {
  constructor(
    @InjectRepository(Post) private readonly postRepo: EntityRepository<Post>,
    @InjectRepository(User) private readonly userRepo: EntityRepository<User>
  ) {}

  /**
   * Все это временная история...
   *
   */
  async onModuleInit(): Promise<void> {
    // const admin_1 = await this.userRepo.count({ email: process.env.ADMIN_1_EMAIL })
    // if (!admin_1) {
    // const user = new User(process.env.ADMIN_1_EMAIL, await hash(process.env.ADMIN_1_PASS))

    if ((await this.postRepo.count()) === 0) {
      const title = 'О рефакторинге'
      const subtitle = 'Что это такое, плюсы и минусы рефакторинга, а также небольшое наблюдение'
      const text = `Рефакторинг - изменения в коде, которые упрощают его понимание и облегчают дальнейшую модификацию, но не меняют его поведение. Рефакторинг может рассматриваться как процесс внесения изменений, так и как результат совершенных преобразований.

      Почему рефакторинг необходим:
      Облегчает понимание кода.  Ваш код предназначен не только для компьютера. Часто рано или поздно требуется внести изменения  в работу программы, которые делает не компьютер, а программист. И здорово, когда он не тратит неделю, пытаясь разобраться, что происходит, чтобы внести правки.
      Помогает находить ошибки. В процессе рефакторинга приходится глубоко вникать в код и разбираться, что он делает. В результате очень сложно пропустить дефекты. Также, как результат предыдущего пункта: чем яснее код, тем проще найти ошибки.
      Не дает разработке остановится. Несмотря на то, что рефакторинг сам по себе требует какого-то времени, без него добавление нового функционала в существующую кодовую базу рано или поздно начнет превращаться в ад: чем больше кода, тем больше времени будет требоваться для понимания его работы и того, как вписать новый функционал, а после его добавления - как исправить появившиеся ошибки. Код начнет выглядеть как серия исправлений и хотфиксов, а разработчики захотят переписать все с нуля.
      Хорошая привычка программиста. Вряд ли вы найдете программиста, пишущего идеальный код. Но можно найти такого, который обладает привычкой как следует потрудиться над своим кодом, не жалея сил и времени, чтобы сделать код простым, стройным, элегантным и эффективным; который уделяет внимание мелочам и относится к коду с душой.
      
      Когда в рефакторинге нет необходимости:
      Вы уверены, что ни вам, ни другим программистам никогда не придется разбираться, как работает код. Если написанные для компьютера инструкции выполняют поставленные задачи и вы знаете, что возвращаться к нему не придется - код может может остаться беспорядочным, уродливым и безобразным.
      Есть необходимость внести изменения, но код настолько запутан, что логику проще написать заново.
      
      Небольшое наблюдение из личного опыта: хорошему менеджеру, разбирающийся в технологиях, оправдать временные затраты на рефакторинг не трудно. Как правило, они даже сами поощряют рефакторинг. Однако есть и такое руководство, которое не понимает необходимость рефакторинга. Оно может считать, что главное - выполнить требования бизнеса, написать приложение, которое решает поставленные задачи. “Рабочая мешанина”, конечно, лучше, чем ничего, но только до момента, когда появятся новые требования от бизнеса и нужно будет добавлять изменения в код. Начальство может считать, что это пустая трата времени, и их очень беспокоит график. Что рефакторинг - это исправление ошибок, которых при “аккуратном программировании” быть не должно. В особых случаях при слове “рефакторинг” могут начинать сомневаться в вашей компетенции и искать вам замену. В этом случае проще не говорить ему вообще ничего, чтобы оно не мешало вам выполнять вашу работу.`

      const post = new Post(
        title,
        subtitle,
        text
        // user
      )

      // user.posts.add(post)

      // this.userRepo.persist(user)
      this.postRepo.persist(post)

      // await this.userRepo.flush()
      await this.postRepo.flush()
    }
  }
}
